[Header("References")]
    [SerializeField] private Transform turretRotationPoint;
    [SerializeField] private LayerMask enemyMask;

   [Header("Attributes")]
   [SerializeField] private float targetingRange = 5f;

    private Transform target;
    
    void Update()
    {
       if (target == null)
       {
            FindTarget();
            return;
       } 

       RotatesTowardsTarget();
       if (!ChecksIfTargetsIsInRange()){
            target = null;
       }
    }

    private void FindTarget() {
        RaycastHit2D[] hits = Physics2D.CircleCastAll(transform.position, targetingRange, (Vector2) 
        transform.position, 0f, enemyMask );

        if (hits.Length > 0)
        {
            target = hits [0].transform;
        }
    }

    private bool ChecksIfTargetsIsInRange() {
        return Vector2.Distance(target.position, transform.position) <= targetingRange;

    }
    private void RotatesTowardsTarget() {
        float angle = Mathf.Atan2(target.position.y - target.position.y, target.position.x - target.position.x) * Mathf.Rad2Deg + 90f;

        Quaternion targetRotation = Quaternion.Euler(new Vector3(0f, 0f, angle));
        turretRotationPoint.rotation = targetRotation;
    }
    private void OnDrawGizmosSelected() {

        Handles.color = Color.cyan;
        Handles.DrawWireDisc(transform.position, transform.forward, targetingRange);

    } 
    